
Master_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e0a  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000873  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000757  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a5  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 20 01 	call	0x240	; 0x240 <main>
  74:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
	  break;
	   case DIO_PORTC:
	   PORTC = Val;
	   break;
	    case DIO_PORTD:
	    PORTD = Val;
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPinDirection+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPinDirection+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPinDirection+0xe0>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPinDirection+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPinDirection+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDirection+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDirection+0x5c>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinDirection+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinDirection+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDirection+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDirection+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDirection+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDirection+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDirection+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDirection+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPinDirection+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDirection+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPinDirection+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPinDirection+0xca>
  fc:	08 95       	ret
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDirection+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDirection+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDirection+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDirection+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDirection+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDirection+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_SetPinValue>:
	}

}
void DIO_SetPinValue(uint8 Port ,uint8 Pin ,  uint8 Val) // val== high or low "1,0";
{
	switch(Val)
 15e:	44 23       	and	r20, r20
 160:	b9 f1       	breq	.+110    	; 0x1d0 <DIO_SetPinValue+0x72>
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	09 f0       	breq	.+2      	; 0x168 <DIO_SetPinValue+0xa>
 166:	6b c0       	rjmp	.+214    	; 0x23e <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH:
		switch(Port)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	89 f0       	breq	.+34     	; 0x18e <DIO_SetPinValue+0x30>
 16c:	28 f0       	brcs	.+10     	; 0x178 <DIO_SetPinValue+0x1a>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	c9 f0       	breq	.+50     	; 0x1a4 <DIO_SetPinValue+0x46>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	11 f1       	breq	.+68     	; 0x1ba <DIO_SetPinValue+0x5c>
 176:	08 95       	ret
		{
			case DIO_PORTA:
			set_bit(PORTA,Pin);
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinValue+0x26>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinValue+0x22>
 188:	82 2b       	or	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
			break;
 18c:	08 95       	ret
			case DIO_PORTB:
			set_bit(PORTB,Pin);
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPinValue+0x3c>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPinValue+0x38>
 19e:	82 2b       	or	r24, r18
 1a0:	88 bb       	out	0x18, r24	; 24
			break;
 1a2:	08 95       	ret
			case DIO_PORTC:
			set_bit(PORTC,Pin);
 1a4:	25 b3       	in	r18, 0x15	; 21
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinValue+0x52>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinValue+0x4e>
 1b4:	82 2b       	or	r24, r18
 1b6:	85 bb       	out	0x15, r24	; 21
			break;
 1b8:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD,Pin);
 1ba:	22 b3       	in	r18, 0x12	; 18
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinValue+0x68>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinValue+0x64>
 1ca:	82 2b       	or	r24, r18
 1cc:	82 bb       	out	0x12, r24	; 18
			break;
 1ce:	08 95       	ret
			default:
			break;
		}
		break;
		case DIO_PIN_LOW:
		switch(Port)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 f0       	breq	.+36     	; 0x1f8 <DIO_SetPinValue+0x9a>
 1d4:	28 f0       	brcs	.+10     	; 0x1e0 <DIO_SetPinValue+0x82>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	d9 f0       	breq	.+54     	; 0x210 <DIO_SetPinValue+0xb2>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	29 f1       	breq	.+74     	; 0x228 <DIO_SetPinValue+0xca>
 1de:	08 95       	ret
		{
			case DIO_PORTA:
			clear_bit(PORTA,Pin);
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SetPinValue+0x8e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SetPinValue+0x8a>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
			break;
 1f6:	08 95       	ret
			case DIO_PORTB:
			clear_bit(PORTB,Pin);
 1f8:	28 b3       	in	r18, 0x18	; 24
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPinValue+0xa6>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPinValue+0xa2>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	88 bb       	out	0x18, r24	; 24
			break;
 20e:	08 95       	ret
			case DIO_PORTC:
			clear_bit(PORTC,Pin);
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinValue+0xbe>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinValue+0xba>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
			break;
 226:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD,Pin);
 228:	22 b3       	in	r18, 0x12	; 18
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinValue+0xd6>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinValue+0xd2>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	08 95       	ret

00000240 <main>:
	 uint8 Recive_data_SPI = 0 ; // recived dummy byte 
	
	
	
	
	UART_Init();
 240:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_Init>

	SPI_Init_Master();
 244:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Init_Master>
	SPI_Init_Transmition();
 248:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_Init_Transmition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	83 ed       	ldi	r24, 0xD3	; 211
 250:	90 e3       	ldi	r25, 0x30	; 48
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x12>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x1c>
 25c:	00 00       	nop
	_delay_ms(1000);	
	
   
    while (1) 
    {
		Recive_data = UART_Recive_Byte(); // recived data from HC-05 and store it in data variable 
 25e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_Recive_Byte>
		
		
		
		
		
		if(Recive_data)
 262:	88 23       	and	r24, r24
 264:	e1 f3       	breq	.-8      	; 0x25e <main+0x1e>
		{
			SPI_Transmit(Recive_data);
 266:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SPI_Transmit>
			Recive_data_SPI = SPI_Recive();
 26a:	0e 94 55 01 	call	0x2aa	; 0x2aa <SPI_Recive>
 26e:	f7 cf       	rjmp	.-18     	; 0x25e <main+0x1e>

00000270 <SPI_Init_Master>:
	DIO_SetPinDirection ( DIO_PORTB , DIO_PIN4 ,  DIO_PIN_IN) ;
	DIO_SetPinDirection ( DIO_PORTB , DIO_PIN5 ,  DIO_PIN_IN) ;
	DIO_SetPinDirection ( DIO_PORTB , DIO_PIN6 ,  DIO_PIN_OUT) ;
	DIO_SetPinDirection ( DIO_PORTB , DIO_PIN7 ,  DIO_PIN_IN) ;

SPI->SPCR.SPE  = 1;
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	65 e0       	ldi	r22, 0x05	; 5
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	66 e0       	ldi	r22, 0x06	; 6
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	67 e0       	ldi	r22, 0x07	; 7
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 298:	68 9a       	sbi	0x0d, 0	; 13
 29a:	69 9a       	sbi	0x0d, 1	; 13
 29c:	6c 9a       	sbi	0x0d, 4	; 13
 29e:	6e 9a       	sbi	0x0d, 6	; 13
 2a0:	08 95       	ret

000002a2 <SPI_Transmit>:
}


void SPI_Transmit(uint8 Transmit_data)
{	
	SPI->SPDR = Transmit_data; 
 2a2:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT(SPI->SPSR , 7)  ==  0);
 2a4:	77 9b       	sbis	0x0e, 7	; 14
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <SPI_Transmit+0x2>
	
}
 2a8:	08 95       	ret

000002aa <SPI_Recive>:
uint8 SPI_Recive(void)
{
	
	 uint8 Recive_data= 0;

	Recive_data= SPI->SPDR ; 
 2aa:	8f b1       	in	r24, 0x0f	; 15
	
	return Recive_data;
}
 2ac:	08 95       	ret

000002ae <SPI_Init_Transmition>:



void SPI_Init_Transmition(void)
{
	DIO_SetPinValue( DIO_PORTB , DIO_PIN4 ,  DIO_PIN_LOW);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPinValue>
 2b8:	08 95       	ret

000002ba <UART_Init>:
{
	UDR = data ; // write in UDR req 
	
	while(GET_BIT(UCSRA , 5)==0); // while flag not fire stuck here polling method 
	
}
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 2ce:	8a b1       	in	r24, 0x0a	; 10
 2d0:	88 61       	ori	r24, 0x18	; 24
 2d2:	8a b9       	out	0x0a, r24	; 10
 2d4:	80 b5       	in	r24, 0x20	; 32
 2d6:	86 68       	ori	r24, 0x86	; 134
 2d8:	80 bd       	out	0x20, r24	; 32
 2da:	87 e6       	ldi	r24, 0x67	; 103
 2dc:	89 b9       	out	0x09, r24	; 9
 2de:	08 95       	ret

000002e0 <UART_Recive_Byte>:

uint8 UART_Recive_Byte(void) // return value void UART_Recive_Byte(uint8*); => by value
{
	uint8 data = 0  ; 
	
	while(GET_BIT(UCSRA , 7)==0);
 2e0:	5f 9b       	sbis	0x0b, 7	; 11
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <UART_Recive_Byte>
	
	data = UDR ; 
 2e4:	8c b1       	in	r24, 0x0c	; 12
	
	return data ; 
	
}
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
